{
  "_args": [
    [
      {
        "raw": "sphericalmercator@https://registry.npmjs.org/sphericalmercator/-/sphericalmercator-1.0.5.tgz",
        "scope": null,
        "escapedName": "sphericalmercator",
        "name": "sphericalmercator",
        "rawSpec": "https://registry.npmjs.org/sphericalmercator/-/sphericalmercator-1.0.5.tgz",
        "spec": "https://registry.npmjs.org/sphericalmercator/-/sphericalmercator-1.0.5.tgz",
        "type": "remote"
      },
      "/opt/service"
    ]
  ],
  "_from": "sphericalmercator@>=1.0.0 <1.1.0",
  "_id": "sphericalmercator@1.0.5",
  "_inCache": true,
  "_location": "/sphericalmercator",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sphericalmercator@https://registry.npmjs.org/sphericalmercator/-/sphericalmercator-1.0.5.tgz",
    "scope": null,
    "escapedName": "sphericalmercator",
    "name": "sphericalmercator",
    "rawSpec": "https://registry.npmjs.org/sphericalmercator/-/sphericalmercator-1.0.5.tgz",
    "spec": "https://registry.npmjs.org/sphericalmercator/-/sphericalmercator-1.0.5.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/@kartotherian/snapshot",
    "/@kartotherian/tilelive-http",
    "/abaculus",
    "/kartotherian-snapshot",
    "/tilelive",
    "/tilelive-bridge",
    "/tilelive-overlay",
    "/tilelive-vector"
  ],
  "_resolved": "https://registry.npmjs.org/sphericalmercator/-/sphericalmercator-1.0.5.tgz",
  "_shasum": "ddc5a049e360e000d0fad9fc22c4071882584980",
  "_shrinkwrap": null,
  "_spec": "sphericalmercator@https://registry.npmjs.org/sphericalmercator/-/sphericalmercator-1.0.5.tgz",
  "_where": "/opt/service",
  "author": {
    "name": "MapBox",
    "email": "info@mapbox.com",
    "url": "http://mapbox.com/"
  },
  "bin": {
    "bbox": "bin/bbox.js",
    "xyz": "bin/xyz.js",
    "to900913": "bin/to900913.js",
    "to4326": "bin/to4326.js"
  },
  "bugs": {
    "url": "https://github.com/mapbox/node-sphericalmercator/issues"
  },
  "dependencies": {},
  "description": "Transformations between the Web Mercator projection and Latitude Longitude coordinates",
  "devDependencies": {
    "eslint": "~1.00.0",
    "eslint-config-unstyled": "^1.1.0",
    "tape": "3.0.x"
  },
  "homepage": "https://github.com/mapbox/node-sphericalmercator#readme",
  "keywords": [
    "map",
    "projection",
    "transformations"
  ],
  "licenses": [
    {
      "type": "BSD"
    }
  ],
  "main": "./sphericalmercator",
  "name": "sphericalmercator",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://secure.travis-ci.org/mapbox/node-sphericalmercator.svg?branch=master)](http://travis-ci.org/mapbox/node-sphericalmercator)\n\n`node-sphericalmercator` provides projection math for converting between\nmercator meters, screen pixels (of 256x256 or configurable-size tiles), and\nlatitude/longitude.\n\nCompatible with nodejs packages and in-browser.\n\n## Installation\n\n`npm install sphericalmercator`\n\n## API\n\nSome datatypes are assumed to be arrays: `ll` is `[lon, lat]`, `xy` and `px` are\n`[x, y]`.\n\n```javascript\n// By default, precomputes up to z30\nvar merc = new SphericalMercator({\n    size: 256\n});\n```\n\n### `px(ll, zoom)`\n\nConvert lon, lat to screen pixel x, y from 0, 0 origin, at a certain zoom level.\nThe inverse of `ll`\n\n### `ll(px, zoom)`\n\nConvert screen pixel value to lon, lat, at a certain zoom level. The inverse\nof `px`\n\n### `bbox(x, y, zoom, tms_style, srs)`\n\nConvert tile xyz value to bbox of the form `[w, s, e, n]`\n\n* `x` {Number} x (longitude) number.\n* `y` {Number} y (latitude) number.\n* `zoom` {Number} zoom.\n* `tms_style` {Boolean} whether to compute using tms-style. (optional, default false)\n* `srs` {String} projection for resulting bbox (WGS84|900913). (optional, default WGS84)\n\nReturns bbox array of values in form `[w, s, e, n]`.\n\n### `xyz(bbox, zoom, tms_style, srs)`\n\nConvert bbox to xyz bounds\n\n* `bbox` {Number} bbox in the form `[w, s, e, n]`.\n* `zoom` {Number} zoom.\n* `tms_style` {Boolean} whether to compute using tms-style. (optional, default false)\n* `srs` {String} projection of input bbox (WGS84|900913). (optional, default WGS84)\n\nReturns {Object} XYZ bounds containing minX, maxX, minY, maxY properties.\n\n### `convert(bbox, to)`\n\nConvert bbox from 900913 to WGS84 or vice versa\n\n* `bbox` {Number} bbox in the form `[w, s, e, n]`.\n* `to` {String} projection of resulting bbox (WGS84|900913). (optional, default WGS84)\n\nReturns bbox array of values in form `[w, s, e, n]`.\n\n### `forward(ll)`\n\nConvert lon, lat values to mercator x, y\n\n### `inverse(xy)`\n\nConvert mercator x, y values to lon, lat\n\n## See Also\n\n* [mercantile](https://github.com/sgillies/mercantile) provides similar utilities for projection and tile math in Python\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mapbox/node-sphericalmercator.git"
  },
  "scripts": {
    "test": "eslint sphericalmercator.js && tape test/*.test.js"
  },
  "url": "http://github.com/mapbox/node-sphericalmercator",
  "version": "1.0.5"
}
