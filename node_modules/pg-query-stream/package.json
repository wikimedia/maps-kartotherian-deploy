{
  "_args": [
    [
      {
        "raw": "pg-query-stream@https://registry.npmjs.org/pg-query-stream/-/pg-query-stream-1.1.1.tgz",
        "scope": null,
        "escapedName": "pg-query-stream",
        "name": "pg-query-stream",
        "rawSpec": "https://registry.npmjs.org/pg-query-stream/-/pg-query-stream-1.1.1.tgz",
        "spec": "https://registry.npmjs.org/pg-query-stream/-/pg-query-stream-1.1.1.tgz",
        "type": "remote"
      },
      "/opt/service"
    ]
  ],
  "_from": "pg-query-stream@>=1.0.0 <2.0.0",
  "_id": "pg-query-stream@1.1.1",
  "_inCache": true,
  "_location": "/pg-query-stream",
  "_phantomChildren": {},
  "_requested": {
    "raw": "pg-query-stream@https://registry.npmjs.org/pg-query-stream/-/pg-query-stream-1.1.1.tgz",
    "scope": null,
    "escapedName": "pg-query-stream",
    "name": "pg-query-stream",
    "rawSpec": "https://registry.npmjs.org/pg-query-stream/-/pg-query-stream-1.1.1.tgz",
    "spec": "https://registry.npmjs.org/pg-query-stream/-/pg-query-stream-1.1.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/@kartotherian/postgres"
  ],
  "_resolved": "https://registry.npmjs.org/pg-query-stream/-/pg-query-stream-1.1.1.tgz",
  "_shasum": "65e97436ef809d1e160eba84ebf11b9e4742eab4",
  "_shrinkwrap": null,
  "_spec": "pg-query-stream@https://registry.npmjs.org/pg-query-stream/-/pg-query-stream-1.1.1.tgz",
  "_where": "/opt/service",
  "author": {
    "name": "Brian M. Carlson"
  },
  "bugs": {
    "url": "https://github.com/brianc/node-pg-query-stream/issues"
  },
  "dependencies": {
    "pg-cursor": "1.3.0"
  },
  "description": "Postgres query result returned as readable stream",
  "devDependencies": {
    "JSONStream": "~0.7.1",
    "concat-stream": "~1.0.1",
    "eslint": "^4.4.0",
    "eslint-config-standard": "^10.2.1",
    "eslint-plugin-import": "^2.7.0",
    "eslint-plugin-node": "^5.1.1",
    "eslint-plugin-promise": "^3.5.0",
    "eslint-plugin-standard": "^3.0.1",
    "mocha": "^3.5.0",
    "pg": "6.x",
    "stream-spec": "~0.3.5",
    "stream-tester": "0.0.5",
    "through": "~2.3.4"
  },
  "homepage": "https://github.com/brianc/node-pg-query-stream#readme",
  "keywords": [
    "postgres",
    "pg",
    "query",
    "stream"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "pg-query-stream",
  "optionalDependencies": {},
  "readme": "# pg-query-stream\n\n[![Build Status](https://travis-ci.org/brianc/node-pg-query-stream.svg)](https://travis-ci.org/brianc/node-pg-query-stream)\n\nReceive result rows from [pg](https://github.com/brianc/node-postgres) as a readable (object) stream.\n\n\n## installation\n\n```bash\n$ npm install pg\n$ npm install pg-query-stream\n```\n\n_requires pg>=2.8.1_\n\n\n## use\n\n```js\nvar pg = require('pg')\nvar QueryStream = require('pg-query-stream')\nvar JSONStream = require('JSONStream')\n\n//pipe 1,000,000 rows to stdout without blowing up your memory usage\npg.connect(function(err, client, done) {\n  if(err) throw err;\n  var query = new QueryStream('SELECT * FROM generate_series(0, $1) num', [1000000])\n  var stream = client.query(query)\n  //release the client when the stream is finished\n  stream.on('end', done)\n  stream.pipe(JSONStream.stringify()).pipe(process.stdout)\n})\n```\n\nThe stream uses a cursor on the server so it efficiently keeps only a low number of rows in memory.\n\nThis is especially useful when doing [ETL](http://en.wikipedia.org/wiki/Extract,_transform,_load) on a huge table.  Using manual `limit` and `offset` queries to fake out async itteration through your data is cumbersom, and _way way way_ slower than using a cursor.\n\n_note: this module only works with the JavaScript client, and does not work with the native bindings. libpq doesn't expose the protocol at a level where a cursor can be manipulated directly_\n\n## contribution\n\nI'm very open to contribution!  Open a pull request with your code or idea and we'll talk about it.  If it's not way insane we'll merge it in too: isn't open source awesome?\n\n## license\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 Brian M. Carlson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/brianc/node-pg-query-stream.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "1.1.1"
}
