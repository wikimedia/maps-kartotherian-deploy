{
  "_args": [
    [
      {
        "raw": "tilelive@https://registry.npmjs.org/tilelive/-/tilelive-5.12.3.tgz",
        "scope": null,
        "escapedName": "tilelive",
        "name": "tilelive",
        "rawSpec": "https://registry.npmjs.org/tilelive/-/tilelive-5.12.3.tgz",
        "spec": "https://registry.npmjs.org/tilelive/-/tilelive-5.12.3.tgz",
        "type": "remote"
      },
      "/opt/service"
    ]
  ],
  "_from": "tilelive@>=5.12.2 <5.13.0",
  "_id": "tilelive@5.12.3",
  "_inCache": true,
  "_location": "/tilelive",
  "_phantomChildren": {},
  "_requested": {
    "raw": "tilelive@https://registry.npmjs.org/tilelive/-/tilelive-5.12.3.tgz",
    "scope": null,
    "escapedName": "tilelive",
    "name": "tilelive",
    "rawSpec": "https://registry.npmjs.org/tilelive/-/tilelive-5.12.3.tgz",
    "spec": "https://registry.npmjs.org/tilelive/-/tilelive-5.12.3.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/kartotherian",
    "/tilelive-vector"
  ],
  "_resolved": "https://registry.npmjs.org/tilelive/-/tilelive-5.12.3.tgz",
  "_shasum": "9c8c770e1194aa8d353d9a1d03147404307cdebd",
  "_shrinkwrap": null,
  "_spec": "tilelive@https://registry.npmjs.org/tilelive/-/tilelive-5.12.3.tgz",
  "_where": "/opt/service",
  "author": {
    "name": "Mapbox",
    "email": "info@mapbox.com",
    "url": "https://www.mapbox.com/"
  },
  "bin": {
    "tilelive-copy": "./bin/tilelive-copy"
  },
  "bugs": {
    "url": "https://github.com/mapbox/tilelive.js/issues"
  },
  "contributors": [
    {
      "name": "Tom MacWright",
      "email": "tmcw"
    },
    {
      "name": "Will White",
      "email": "willwhite"
    },
    {
      "name": "Dane Springmeyer",
      "email": "springmeyer"
    },
    {
      "name": "Young Hahn",
      "email": "yhahn"
    },
    {
      "name": "Konstantin Käfer",
      "email": "kkaefer"
    },
    {
      "name": "Blake Thompson",
      "email": "flippmoke"
    }
  ],
  "dependencies": {
    "minimist": "~0.2.0",
    "progress-stream": "~0.5.x",
    "queue-async": "~1.0.7",
    "sphericalmercator": "~1.0.1"
  },
  "description": "API for various map tile backends",
  "devDependencies": {
    "concat-stream": "1.4.x",
    "coveralls": "~2.11.1",
    "eslint": "^0.24.0",
    "istanbul": "~0.3.0",
    "mbtiles": "~0.8.2",
    "stream-combiner": "^0.2.2",
    "tape": "2.13.3",
    "tilejson": "~1.0.0"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "homepage": "https://github.com/mapbox/tilelive.js#readme",
  "keywords": [
    "map",
    "mapnik",
    "tiles"
  ],
  "licenses": [
    {
      "type": "BSD"
    }
  ],
  "main": "./lib/tilelive.js",
  "name": "tilelive",
  "optionalDependencies": {},
  "readme": "# tilelive.js\n\n[![Build Status](https://travis-ci.org/mapbox/tilelive.svg?branch=master)](https://travis-ci.org/mapbox/tilelive)\n[![Coverage Status](https://coveralls.io/repos/github/mapbox/tilelive/badge.svg?branch=master)](https://coveralls.io/github/mapbox/tilelive?branch=master)\n\n- Tilelive is a module to help interactions between tilelive source modules.\n- A tilelive source is an interface implemented by node modules that deal with reading and writing map tiles.\n\n\n## Awesome tilelive modules\n\n- [tilelive-vector](https://github.com/mapbox/tilelive-vector) - Implements the tilelive API for rendering mapnik vector tiles to raster images.\n- [tilelive-bridge](https://github.com/mapbox/tilelive-bridge) - Implements the tilelive API for generating mapnik vector tiles from traditional mapnik datasources.\n- [tilelive-mapnik](https://github.com/mapbox/tilelive-mapnik) - mapnik renderer backend for tilelive.\n- [tilelive-s3](https://github.com/mapbox/tilelive-s3) - Extends TileJSON for S3-specific tasks.\n- [tilelive-file](https://github.com/mapbox/tilelive-file) - tilelive.js adapter for reading from the filesystem.\n- [tilelive-tmsource](https://github.com/mojodna/tilelive-tmsource) - A tilelive provider for TM2 sources.\n- [tilelive-cache](https://github.com/mojodna/tilelive-cache) - A caching wrapper for tilelive.js\n- [tilelive-overlay](https://github.com/mapbox/tilelive-overlay) - Render GeoJSON features with simplestyle styles in a tilelive pipeline.\n- [tilelive-tmstyle](https://github.com/mojodna/tilelive-tmstyle) - A tilelive provider for tmstyle sources.\n- [tilelive-http](https://github.com/mojodna/tilelive-http) - An HTTP source for tilelive.\n- [node-mbtiles](https://github.com/mapbox/node-mbtiles) - A mbtiles renderer and storage backend for tilelive.\n- [tl](https://github.com/mojodna/tl) - An alternate command line interface to tilelive.\n- [tilelive-omnivore](https://github.com/mapbox/tilelive-omnivore) - Implements the tilelive api for a variety of data sources.\n- [tilelive-xray](https://github.com/mojodna/tilelive-xray) - Tilelive vector tile visualization.\n- [tilelive-merge](https://github.com/mojodna/tilelive-merge) - A tilelive source that merges sources.\n- [tilelive-streaming](https://github.com/mojodna/tilelive-streaming) - Streaming functionality for tilelive modules.\n- [tilelive-redis](https://github.com/mapbox/tilelive-redis) - Redis wrapping source for tilelive.\n- [tilelive-modules](https://github.com/mojodna/tilelive-modules) - A listing of known tilelive modules.\n- [tilelive-decorator](https://github.com/mapbox/tilelive-decorator) - Load vector tiles from a tilelive source and decorate them with properties from redis.\n- [tilelive-blend](https://github.com/mojodna/tilelive-blend) - A tilelive provider that blends.\n- [tilelive-carto](https://github.com/mojodna/tilelive-carto) - A Carto style source for tilelive\n- [mongotiles](https://github.com/vsivsi/mongotiles) - mongotiles is a tilelive backend plug-in for MongoDB GridFS.\n- [tilelive-rasterpbf](https://github.com/mojodna/tilelive-rasterpbf) - A tilelive source for outputting PBF-encoded rasters from PostGIS.\n- [tilelive-memcached](https://github.com/mapbox/tilelive-memcached) - A memcached wrapping source for tilelive.\n- [tilelive-csvin](https://github.com/mojodna/tilelive-csvin) - A streaming tilelive source for CSV inputs.\n- [tilelive-tms](https://github.com/oscarfonts/tilelive-tms) - A tilelive.js adapter for reading from a TMS service.\n- [tilelive-multicache](https://github.com/mapbox/tilelive-multicache) - Module for adding a caching layer in front a tilelive source. \n- [tilelive-cardboard](https://github.com/mapbox/tilelive-cardboard) - Renders vector tiles from a cardboard dataset.\n- [tilelive-utfgrid](https://github.com/mojodna/tilelive-utfgrid) - A tilelive provider that treats grids as tiles\n- [tilelive-arcgis](https://github.com/FuZhenn/tilelive-arcgis) - A tilelive.js adapter for ArcGIS tile caches.\n- [tilelive-mapbox](https://github.com/mojodna/tilelive-mapbox) - A tilelive.js source for mapbox:// URIs.\n- [tilelive-solid](https://github.com/mojodna/tilelive-solid) - A tilelive provider that generates solid colored tiles.\n- [tilelive-raster](https://github.com/mojodna/tilelive-raster) - A tilelive source for simple rasters, both local and remote.\n- [tilelive-null](https://github.com/mojodna/tilelive-null) - A noop sink for tilelive.\n- [tilelive-noop](https://github.com/mapbox/tilelive-noop) - A no-op tilelive source.\n- [tilelive-csv](https://github.com/mojodna/tilelive-csv) - PBF → CSV with tilelive.\n- [tilelive-error](https://github.com/mojodna/tilelive-error) - Avoid repeating error-prone initialization.\n- [tilelive-lambda](https://github.com/mojodna/tilelive-lambda) - AWS Lambda source for tilelive.\n- [tilelive-cartodb](https://github.com/mojodna/tilelive-cartodb) - A tilelive source for CartoDB.\n- [cdbtiles](https://github.com/vsivsi/cdbtiles) - A tilelive backend plug-in for CouchDB.\n- [node-tilejson](https://github.com/mapbox/node-tilejson) - Tile source backend for online tile sources.\n- [tilelive-foxgis](https://github.com/FoxGIS/tilelive-foxgis) - A tilelive plugin to serve tiles with mongodb\n- [tessera](https://github.com/mojodna/tessera) - A tilelive-based tile server.\n\n## Ecosytem of tilelive\n![image](https://cloud.githubusercontent.com/assets/1522494/16645056/a8f8fff2-4453-11e6-8ba7-b9aff033f2cd.png)\n\n\n\n\n## Usage\n\nTilelive doesn't ship with any implementing modules by default. To register a module as one tilelive recognizes:\n\n    require('[implementation]').registerProtocols(tilelive);\n\n* `tilelive.list(source, callback)`: Lists all tilesets in a directory. `source` is a folder that is used by registered implementations to search for individual tilesets. `callback` receives an error object (or `null`) and a hash hash with keys being Tilestore IDs and values being Tilestore URIs. Example:\n\n```javascript\n{\n    \"world-light\": \"mbtiles:///path/to/file/world-light.mbtiles\",\n    \"mapquest\": \"tilejson:///path/to/file/mapquest.tilejson\"\n}\n```\n\n* `tilelive.findID(source, id, callback)`: Looks for a particular tileset ID in a directory. `callback` receives an error object (or `null`) and the URI of the tileset.\n\n\n* `tilelive.load(uri, callback)`: Loads the Tilestore object associated with the specified `uri`. `callback` receives an error object (or `null`) and the [Tilestore object](API.md).\n\n* `tilelive.info(uri, callback)`: Loads the Tilestore object associated with the specified `uri` and retrieves its metadata in a [TileJSON](http://github.com/mapbox/tilejson-spec) compliant format. `callback` receives an error object (or `null`), the metadata hash and the Tilestore object.\n\n* `tilelive.all(source, callback)`: Loads metadata in a [TileJSON](http://github.com/mapbox/tilejson-spec) compliant format for all tilesets in the `source` directory. `callback` receives an error object (or `null`) and an array with TileJSON metadata about each tileset in that directory.\n\n* `tilelive.verify(tilejson)`: Validates a TileJSON object and returns error objects for invalid entries.\n\n## Read/write streams\n\nTilelive provides an implementation of node object streams for copying tiles from one source to another.\n\n    // Copy all tiles and metadata from source A to source B.\n    var get = tilelive.createReadStream(sourceA);\n    var put = tilelive.createWriteStream(sourceB);\n    get.pipe(put);\n    put.on('finish', function() {\n        console.log('done!');\n    });\n\nSee `tilelive-copy` and the streams tests for example usage of copy streams.\n\n## Parallel read streams\n\nTilelive can split a read operation into an arbitrary number of jobs. Pass a `job` parameter to options when using `tilelive.createReadStream` or `tilelive.deserialize`:\n\n```javascript\nvar readable = tilelive.createReadStream(src, { type: 'scanline', job: { total: 4, num: 1 } });\n```\n\nThis instructs tilelive to only read tiles that would fall into job `1` of `4`. A complete read would mean four calls each with a different `num`.\n\n## bin/tilelive-copy\n\ntilelive can be used to copy data between tilestores. For a full list of options, run `tilelive-copy`.\n\n## Tests\n\nTo run the tests\n\n    npm test\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/mapbox/tilelive.js.git"
  },
  "scripts": {
    "cov": "istanbul cover tape test/*.test.js && coveralls < ./coverage/lcov.info",
    "test": "eslint --no-eslintrc -c .eslintrc lib/*.js && tape test/*.test.js"
  },
  "url": "http://github.com/mapbox/tilelive.js",
  "version": "5.12.3"
}
