{
  "_args": [
    [
      {
        "raw": "requestretry@https://registry.npmjs.org/requestretry/-/requestretry-1.4.0.tgz",
        "scope": null,
        "escapedName": "requestretry",
        "name": "requestretry",
        "rawSpec": "https://registry.npmjs.org/requestretry/-/requestretry-1.4.0.tgz",
        "spec": "https://registry.npmjs.org/requestretry/-/requestretry-1.4.0.tgz",
        "type": "remote"
      },
      "/opt/service"
    ]
  ],
  "_from": "requestretry@1.4.0",
  "_id": "requestretry@1.4.0",
  "_inCache": true,
  "_location": "/requestretry",
  "_phantomChildren": {
    "chalk": "1.1.3",
    "combined-stream": "1.0.5",
    "commander": "2.12.2",
    "core-util-is": "1.0.2",
    "ctype": "0.5.3",
    "forever-agent": "0.6.1",
    "inherits": "2.0.3",
    "is-my-json-valid": "2.16.1",
    "isstream": "0.1.2",
    "json-stringify-safe": "5.0.1",
    "mime-db": "1.30.0",
    "oauth-sign": "0.8.2",
    "stringstream": "0.0.5",
    "tough-cookie": "2.3.3"
  },
  "_requested": {
    "raw": "requestretry@https://registry.npmjs.org/requestretry/-/requestretry-1.4.0.tgz",
    "scope": null,
    "escapedName": "requestretry",
    "name": "requestretry",
    "rawSpec": "https://registry.npmjs.org/requestretry/-/requestretry-1.4.0.tgz",
    "spec": "https://registry.npmjs.org/requestretry/-/requestretry-1.4.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/tilejson"
  ],
  "_resolved": "https://registry.npmjs.org/requestretry/-/requestretry-1.4.0.tgz",
  "_shasum": "839f7cad8458562eee01680d27452e9f85e16582",
  "_shrinkwrap": null,
  "_spec": "requestretry@https://registry.npmjs.org/requestretry/-/requestretry-1.4.0.tgz",
  "_where": "/opt/service",
  "author": {
    "name": "Francois-Guillaume Ribreau",
    "email": "npm@fgribreau.com",
    "url": "http://fgribreau.com"
  },
  "bugs": {
    "url": "https://github.com/FGRibreau/node-request-retry/issues"
  },
  "contributors": [
    {
      "name": "juliendangers",
      "email": "dev@juliencrestin.com"
    }
  ],
  "dependencies": {
    "fg-lodash": "0.0.2",
    "request": "2.58.x"
  },
  "description": "request-retry wrap nodejs request to retry http(s) requests in case of error",
  "devDependencies": {
    "chai": "~2.3.0",
    "mocha": "~2.2.4"
  },
  "homepage": "https://github.com/FGRibreau/node-request-retry#readme",
  "license": "MIT",
  "main": "index.js",
  "name": "requestretry",
  "optionalDependencies": {},
  "readme": "# Request-retry [![Deps](https://david-dm.org/FGRibreau/node-request-retry.png)](https://david-dm.org/FGRibreau/node-request-retry) [![Build Status](https://drone.io/github.com/FGRibreau/node-request-retry/status.png)](https://drone.io/github.com/FGRibreau/node-request-retry/latest)\n\n[![npm](https://nodei.co/npm/requestretry.png)](https://npmjs.org/package/requestretry)\n\nWhen the connection fails with one of `ECONNRESET`, `ENOTFOUND`, `ESOCKETTIMEDOUT`, `ETIMEDOUT`, `ECONNREFUSED`, `EHOSTUNREACH`, `EPIPE`, `EAI_AGAIN` or when an HTTP 5xx error occurrs, the request will automatically be re-attempted as these are often recoverable errors and will go away on retry.\n\n## Usage\n\nRequest-retry is a drop-in replacement for [request](https://github.com/mikeal/request) but adds two new options `maxAttempts` and `retryDelay`.\n\n```javascript\nvar request = require('requestretry');\n\nrequest({\n  url: 'https://api.domain.com/v1/a/b'\n  json:true,\n\n  // The above parameters are specific to Request-retry\n  maxAttempts: 5,   // (default) try 5 times\n  retryDelay: 5000,  // (default) wait for 5s before trying again\n  retryStrategy: request.RetryStrategies.HTTPOrNetworkError // (default) retry on 5xx or network errors\n}, function(err, response, body){\n  // this callback will only be called when the request succeeded or after maxAttempts or on error\n});\n```\n\n## Installation\n\nInstall with [npm](https://npmjs.org/package/requestretry).\n\n    npm install --save requestretry\n\n## How to define your own retry strategy\n\n```\n/**\n * @param  {Null | Object} err\n * @param  {Object} response\n * @return {Boolean} true if the request should be retried\n */\nfunction myRetryStrategy(err, response){\n  // retry the request if we had an error or if the response was a 'Bad Gateway'\n  return err ||Â response.statusCode === 502;\n}\n\nrequest({\n  url: 'https://api.domain.com/v1/a/b'\n  json:true,\n  retryStrategy: myRetryStrategy\n}, function(err, response, body){\n  // this callback will only be called when the request succeeded or after maxAttempts or on error\n});\n```\n\n## Modifying `request` options\nYou can access request's `defaults` method like so:\n\n```js\nvar request = require('requestretry').request.defaults({my: options});\n```\n\n## Todo\n\n- Tests\n- Use an EventEmitter to notify retries\n\n## [Changelog](CHANGELOG.md)\n\nCopyright 2014, [Francois-Guillaume Ribreau](http://fgribreau.com) (npm@fgribreau.com)\n",
  "readmeFilename": "README.md",
  "repository": {
    "url": "git+https://github.com/FGRibreau/node-request-retry.git"
  },
  "scripts": {
    "test": "mocha test"
  },
  "version": "1.4.0"
}
