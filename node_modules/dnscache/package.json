{
  "_args": [
    [
      {
        "raw": "dnscache@https://registry.npmjs.org/dnscache/-/dnscache-1.0.1.tgz",
        "scope": null,
        "escapedName": "dnscache",
        "name": "dnscache",
        "rawSpec": "https://registry.npmjs.org/dnscache/-/dnscache-1.0.1.tgz",
        "spec": "https://registry.npmjs.org/dnscache/-/dnscache-1.0.1.tgz",
        "type": "remote"
      },
      "/opt/service"
    ]
  ],
  "_from": "dnscache@>=1.0.1 <2.0.0",
  "_id": "dnscache@1.0.1",
  "_inCache": true,
  "_location": "/dnscache",
  "_phantomChildren": {},
  "_requested": {
    "raw": "dnscache@https://registry.npmjs.org/dnscache/-/dnscache-1.0.1.tgz",
    "scope": null,
    "escapedName": "dnscache",
    "name": "dnscache",
    "rawSpec": "https://registry.npmjs.org/dnscache/-/dnscache-1.0.1.tgz",
    "spec": "https://registry.npmjs.org/dnscache/-/dnscache-1.0.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/service-runner"
  ],
  "_resolved": "https://registry.npmjs.org/dnscache/-/dnscache-1.0.1.tgz",
  "_shasum": "42cb2b9bfb5e8fbdfa395aac74e127fc05074d31",
  "_shrinkwrap": null,
  "_spec": "dnscache@https://registry.npmjs.org/dnscache/-/dnscache-1.0.1.tgz",
  "_where": "/opt/service",
  "author": {
    "name": "Vinit Sacheti",
    "email": "vsacheti@yahoo.com"
  },
  "bugs": {
    "url": "http://github.com/yahoo/dnscache/issues"
  },
  "dependencies": {
    "asap": "~2.0.3",
    "lodash.clone": "~4.3.2"
  },
  "description": "dnscache for Node",
  "devDependencies": {
    "async": "~1.5.2",
    "istanbul": "~0.4.3",
    "jenkins-mocha": "~2.6.0",
    "jshint": "~2.9.2",
    "yui-lint": "~0.2.0"
  },
  "homepage": "https://github.com/yahoo/dnscache#readme",
  "keywords": [
    "dnscache",
    "dns"
  ],
  "license": "BSD",
  "main": "./lib/index.js",
  "name": "dnscache",
  "optionalDependencies": {},
  "readme": "dnscache for Node\n===================\n\nThis module wraps the [dns](http://nodejs.org/api/dns.html) module methods and provide a caching layer in between.\nEvery call to a dns method is first looked into the local cache, in case of cache hit the value from cache is returned, in case of cache miss the original dns call is made\nand the return value is cached in the local cache.\n\nIt is very similar to GOF Proxy design pattern providing a Cache Proxy.\n\nThe goal of this module is to cache the most used/most recent dns calls, to avoid the network delay and improve the performance.\n\nOnce this module is enabled, all the subsequent calls to `require('dns')` are wrapped too.\n\n**NOTE:** There are situations where the built-in `dns` functions would throw, rather than call back with an error. Due to the fact that asynchronous caching mechanisms are supported, all errors for these functions will be passed as the first argument to the callback.\n\nInstallation\n------------\n\n`npm install dnscache`\n\nUsage\n-----\n\n```javascript\nvar dns = require('dns'),\n    dnscache = require('dnscache')({\n        \"enable\" : true,\n        \"ttl\" : 300,\n        \"cachesize\" : 1000\n    });\n    \n    //to use the cached dns either of dnscache or dns can be called.\n    //all the methods of dns are wrapped, this one just shows lookup on an example\n    \n    //will call the wrapped dns\n    dnscache.lookup('www.yahoo.com', function(err, result) {\n        //do something with result\n    });\n    \n    //will call the wrapped dns\n    dns.lookup('www.google.com', function(err, result) {\n        //do something with result\n    });\n    \n\n```\n\nConfiguration\n-------------\n\n   * `enable` - Whether dnscache is enabled or not, defaults to `false`.\n   * `ttl` - ttl for cache-entries. Default: `300`\n   * `cachesize` - number of cache entries, defaults to `1000`\n   * `cache` - If a custom cache needs to be used instead of the supplied cache implementation. Only for Advanced Usage. Custom Cache needs to have same interface for `get` and `set`.\n\n\nAdvanced Caching\n----------------\n\nIf you want to use a different cache mechanism (ex: `mdbm`, `redis`), you only need to create an object similar to this:\n\n```javascript\nvar Cache = function(config) {\n\n    this.set = function(key, value, callback) {};\n\n    this.get = function(key, callback) {};\n};\n```\n\n\nBuild Status\n------------\n\n[![Build Status](https://secure.travis-ci.org/yahoo/dnscache.png?branch=master)](http://travis-ci.org/yahoo/dnscache)\n\n\nNode Badge\n----------\n\n[![NPM](https://nodei.co/npm/dnscache.png)](https://nodei.co/npm/dnscache/)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/yahoo/dnscache.git"
  },
  "scripts": {
    "posttest": "istanbul check-coverage",
    "pretest": "jshint --config ./node_modules/yui-lint/jshint.json ./lib/ ./test/",
    "test": "jenkins-mocha ./test/*.js"
  },
  "version": "1.0.1"
}
