{
  "name": "wikimedia-mapdata",
  "version": "0.3.0",
  "private": true,
  "description": "Wikimedia map data manager for Kartographer's extension and Kartotherian.",
  "main": "src/index.js",
  "scripts": {
    "test": "eslint ."
  },
  "devDependencies": {
    "eslint": "^3.9.1",
    "eslint-config-wikimedia": "^0.3.0"
  },
  "dependencies": {},
  "gitHead": "ee3a9e5dcfb89cffc28acb24e2cc281931ceaf08",
  "readme": "# wikimedia-mapdata\n\nWikimedia map data is a library for use in the mediawiki [Kartographer extension](https://www.mediawiki.org/wiki/Extension:Kartographer)  and [Kartotherian snapshot](https://github.com/kartotherian/kartotherian-snapshot) service.\n\n## Introduction\n\nThe library takes a list of ids, downloads the map data from the mediawiki API, parses map data, extracts the external data, and downloads the external data. Once the process is complete, a list of internal and external data groups is returned. The geoJson for each groups is returned with `group.getGeoJSON()`.\n\nThe library first requires wrapper methods to be passed in order to be used both on client-side and server-side.\n\n## Install\n\n```\nnpm install juliengirault/wikimedia-mapdata --save\n```\n\n## Required wrapper methods\n\n* `createPromise`\n* `whenAllPromises`\n* `isEmptyObject`\n* `isPlainObject`\n* `isArray`\n* `extend`\n* `getJSON`\n* `mwApi`\n* `mwUri`\n* `title`\n\n## Example for use on client-side\n\n```js\n// Configure data manager with wrapper methods\nvar dataManager = require( './DataManager' )( {\n\n\t/**\n     * @required same as JS6 new Promise:\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n     */\n\tcreatePromise: function ( callback ) {\n\t\tvar promise = $.Deferred();\n\t\ttry {\n\t\t\tcallback( promise.resolve.bind( promise ), promise.reject.bind( promise ) );\n\t\t} catch (err) {\n\t\t\tpromise.reject( err );\n\t\t}\n\t\treturn promise;\n\t},\n\n\t/**\n     * @required\n     */\n\twhenAllPromises( promises ) {\n\t\treturn $.when.apply( $, promises );\n\t},\n\n\t/**\n     * @required\n     */\n\tisEmptyObject: function () {\n\t\treturn $.isEmptyObject.apply( $, arguments );\n\t},\n\n\t/**\n     * @required\n     */\n\tisPlainObject: function () {\n\t\treturn $.isPlainObject.apply( $, arguments );\n\t},\n\n\t/**\n     * @required\n     */\n\tisArray: function () {\n\t\treturn $.isArray.apply( $, arguments );\n\t},\n\n\t/**\n     * @required\n     */\n\textend: function () {\n\t\treturn $.extend.apply( $, arguments );\n\t},\n\n\t/**\n     * @required\n     */\n\tgetJSON: function ( url ) {\n\t\treturn $.getJSON( url );\n\t},\n\n\t/**\n     * @required\n     */\n\tmwApi: function ( data ) {\n\t\treturn new mw.Api()[ 'get' ]( data );\n\t},\n\n\t/**\n     * @required\n     */\n\ttitle: mw.config.get( 'wgPageName' ),\n\n\t/**\n     * @optional\n     */\n\tmwUri: function ( data ) {\n\t\treturn new mw.Uri( data );\n\t},\n\n\t/**\n     * @optional\n     */\n\tclientStore: mw.config.get( 'wgKartographerLiveData' ),\n\n\t/**\n     * @optional\n     */\n\tdebounce: function () {\n\t\treturn $.debounce.apply( $, arguments );\n\t},\n\n\t/**\n     * @optional\n     */\n\tbind: function () {\n\t\treturn $.proxy.apply( $, arguments );\n\t},\n\n\t/**\n     * @optional\n     */\n\tmwMsg: function () {\n\t\treturn mw.msg.apply( mw.msg, arguments );\n\t}\n} );\n\n// Download and build map geojson for a list of groups:\nDataManager.loadGroups( groupIds ).then( function ( dataGroups ) {\n\tvar mapGeoJSON, group;\n\n\tfor (var i = 0; i < dataGroups.length; i++ ) {\n\t\tgroup = dataGroups[ i ];\n\n\t\tif (dataGroups.length > 1) {\n\t\t\tmapGeoJSON = mapGeoJSON || [];\n\t\t\tmapGeoJSON.push( group.getGeoJSON() );\n\t\t} else {\n\t\t\tmapGeoJSON = group.getGeoJSON();\n\t\t}\n\t}\n} );\n```\n",
  "readmeFilename": "README.md",
  "_id": "wikimedia-mapdata@0.3.0",
  "_shasum": "97eaa79cb0153981b54833ae8bd4cebd6aa0fb40",
  "_from": "git+https://gerrit.wikimedia.org/r/mapdata#ee3a9e5dcfb89cffc28acb24e2cc281931ceaf08",
  "_resolved": "git+https://gerrit.wikimedia.org/r/mapdata#ee3a9e5dcfb89cffc28acb24e2cc281931ceaf08"
}
