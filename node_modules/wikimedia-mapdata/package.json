{
  "_args": [
    [
      {
        "raw": "wikimedia-mapdata@git+https://gerrit.wikimedia.org/r/mapdata#0159e39c4de2f4522e2915faa636306f42d08cbe",
        "scope": null,
        "escapedName": "wikimedia-mapdata",
        "name": "wikimedia-mapdata",
        "rawSpec": "git+https://gerrit.wikimedia.org/r/mapdata#0159e39c4de2f4522e2915faa636306f42d08cbe",
        "spec": "https://gerrit.wikimedia.org/r/mapdata#0159e39c4de2f4522e2915faa636306f42d08cbe",
        "type": "git"
      },
      "/opt/service/node_modules/@kartotherian/snapshot"
    ]
  ],
  "_from": "git+https://gerrit.wikimedia.org/r/mapdata#0159e39c4de2f4522e2915faa636306f42d08cbe",
  "_id": "wikimedia-mapdata@0.5.0",
  "_inCache": true,
  "_location": "/wikimedia-mapdata",
  "_phantomChildren": {},
  "_requested": {
    "raw": "wikimedia-mapdata@git+https://gerrit.wikimedia.org/r/mapdata#0159e39c4de2f4522e2915faa636306f42d08cbe",
    "scope": null,
    "escapedName": "wikimedia-mapdata",
    "name": "wikimedia-mapdata",
    "rawSpec": "git+https://gerrit.wikimedia.org/r/mapdata#0159e39c4de2f4522e2915faa636306f42d08cbe",
    "spec": "https://gerrit.wikimedia.org/r/mapdata#0159e39c4de2f4522e2915faa636306f42d08cbe",
    "type": "git"
  },
  "_requiredBy": [
    "/@kartotherian/snapshot"
  ],
  "_resolved": "git+https://gerrit.wikimedia.org/r/mapdata#0159e39c4de2f4522e2915faa636306f42d08cbe",
  "_shasum": "da49b266c9f67704b0d13c71050440e29ec43536",
  "_shrinkwrap": null,
  "_spec": "wikimedia-mapdata@git+https://gerrit.wikimedia.org/r/mapdata#0159e39c4de2f4522e2915faa636306f42d08cbe",
  "_where": "/opt/service/node_modules/@kartotherian/snapshot",
  "dependencies": {},
  "description": "Wikimedia map data manager for Kartographer's extension and Kartotherian.",
  "devDependencies": {
    "eslint": "^4.0.0",
    "eslint-config-wikimedia": "^0.5.0",
    "grunt": "1.0.2",
    "grunt-eslint": "20.1.0"
  },
  "gitHead": "0159e39c4de2f4522e2915faa636306f42d08cbe",
  "main": "src/index.js",
  "name": "wikimedia-mapdata",
  "optionalDependencies": {},
  "private": true,
  "readme": "# wikimedia-mapdata\n\nWikimedia map data is a library for use in the mediawiki [Kartographer extension](https://www.mediawiki.org/wiki/Extension:Kartographer)  and [Kartotherian snapshot](https://github.com/kartotherian/snapshot) service.\n\n## Introduction\n\nThe library takes a list of ids, downloads the map data from the mediawiki API, parses map data, extracts the external data, and downloads the external data. Once the process is complete, a list of internal and external data groups is returned. The geoJson for each groups is returned with `group.getGeoJSON()`.\n\nThe library first requires wrapper methods to be passed in order to be used both on client-side and server-side.\n\n## Install\n\n```\nnpm install git+https://gerrit.wikimedia.org/r/mapdata --save\n```\n\n## Required wrapper methods\n\n* `createPromise`\n* `whenAllPromises`\n* `isEmptyObject`\n* `isPlainObject`\n* `extend`\n* `getJSON`\n* `mwApi`\n* `mwHtmlElement`\n* `mwUri`\n* `title`\n\n## Example for use on client-side\n\n```js\n// Configure data manager with wrapper methods\nvar dataManager = require( './DataManager' )( {\n\n  /**\n   * @required same as JS6 new Promise:\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n   */\n  createPromise: function ( callback ) {\n    var promise = $.Deferred();\n    try {\n      callback( promise.resolve.bind( promise ), promise.reject.bind( promise ) );\n    } catch (err) {\n      promise.reject( err );\n    }\n    return promise;\n  },\n\n  /**\n   * @required\n   */\n  whenAllPromises( promises ) {\n    return $.when.apply( $, promises );\n  },\n\n  /**\n   * @required\n   */\n  isEmptyObject: function () {\n    return $.isEmptyObject.apply( $, arguments );\n  },\n\n  /**\n   * @required\n   */\n  isPlainObject: function () {\n    return $.isPlainObject.apply( $, arguments );\n  },\n\n  /**\n   * @required\n   */\n  extend: function () {\n    return $.extend.apply( $, arguments );\n  },\n\n  /**\n   * @required\n   */\n  getJSON: function ( url ) {\n    return $.getJSON( url );\n  },\n\n  /**\n   * @required\n   */\n  mwApi: function ( data ) {\n    return new mw.Api()[ 'get' ]( data );\n  },\n\n  /**\n   * @required\n   */\n  title: mw.config.get( 'wgPageName' ),\n\n  /**\n   * @optional\n   */\n  mwHtmlElement: function () {\n    return mw.html.element.apply( mw.html, arguments );\n  },\n\n  /**\n   * @optional\n   */\n  mwUri: function ( data ) {\n    return new mw.Uri( data );\n  },\n\n  /**\n   * @optional\n   */\n  clientStore: mw.config.get( 'wgKartographerLiveData' ),\n\n  /**\n   * @optional\n   */\n  debounce: function () {\n    return $.debounce.apply( $, arguments );\n  },\n\n  /**\n   * @optional\n   */\n  mwMsg: function () {\n    return mw.msg.apply( mw.msg, arguments );\n  }\n} );\n\n// Download and build map geojson for a list of groups:\nDataManager.loadGroups( groupIds ).then( function ( dataGroups ) {\n  var mapGeoJSON, group;\n\n  for (var i = 0; i < dataGroups.length; i++ ) {\n    group = dataGroups[ i ];\n\n    if (dataGroups.length > 1) {\n      mapGeoJSON = mapGeoJSON || [];\n      mapGeoJSON.push( group.getGeoJSON() );\n    } else {\n      mapGeoJSON = group.getGeoJSON();\n    }\n  }\n} );\n```\n",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "eslint ."
  },
  "version": "0.5.0"
}
