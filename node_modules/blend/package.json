{
  "_args": [
    [
      {
        "raw": "blend@https://registry.npmjs.org/blend/-/blend-1.2.0.tgz",
        "scope": null,
        "escapedName": "blend",
        "name": "blend",
        "rawSpec": "https://registry.npmjs.org/blend/-/blend-1.2.0.tgz",
        "spec": "https://registry.npmjs.org/blend/-/blend-1.2.0.tgz",
        "type": "remote"
      },
      "/opt/service"
    ]
  ],
  "_from": "blend@>=1.2.0 <1.3.0",
  "_id": "blend@1.2.0",
  "_inCache": true,
  "_location": "/blend",
  "_phantomChildren": {},
  "_requested": {
    "raw": "blend@https://registry.npmjs.org/blend/-/blend-1.2.0.tgz",
    "scope": null,
    "escapedName": "blend",
    "name": "blend",
    "rawSpec": "https://registry.npmjs.org/blend/-/blend-1.2.0.tgz",
    "spec": "https://registry.npmjs.org/blend/-/blend-1.2.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/geojson-mapnikify",
    "/makizushi"
  ],
  "_resolved": "https://registry.npmjs.org/blend/-/blend-1.2.0.tgz",
  "_shasum": "6d0be6171fad100bfa34656477ba2924b0dc6296",
  "_shrinkwrap": null,
  "_spec": "blend@https://registry.npmjs.org/blend/-/blend-1.2.0.tgz",
  "_where": "/opt/service",
  "author": {
    "name": "Konstantin KÃ¤fer",
    "email": "kkaefer@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/mapbox/node-blend/issues"
  },
  "contributors": [
    {
      "name": "Dane Springmeyer",
      "email": "dane@mapbox.com"
    },
    {
      "name": "Blake Thompson",
      "email": "blake@mapbox.com"
    }
  ],
  "dependencies": {
    "mapnik": "~3.5.0"
  },
  "description": "High speed image blending and quantization",
  "devDependencies": {
    "eslint": "~1.00.0",
    "eslint-config-unstyled": "^1.1.0",
    "mkdirp": "~0.5.0",
    "mocha": "1.x",
    "rimraf": "~2.2.8"
  },
  "homepage": "http://github.com/mapbox/node-blend",
  "licenses": [
    {
      "type": "BSD"
    }
  ],
  "main": "index.js",
  "name": "blend",
  "optionalDependencies": {},
  "readme": "# node-blend\n\nThis module can re-encode one or more images of the same size. It supports stiching multiple images together into a single image, alpha-compositing, color quantization, and various compression options to produce highly optimized output.\n\n[![Build Status](https://travis-ci.org/mapbox/node-blend.svg)](https://travis-ci.org/mapbox/node-blend)\n[![Build status](https://ci.appveyor.com/api/projects/status/e88smp2ln3tsuajb)](https://ci.appveyor.com/project/Mapbox/node-blend)\n\n# Usage\n\n```javascript\nvar blend = require('blend');\nvar image1; // Contains a compressed PNG image as a buffer.\nvar image2;\nblend([ image1, image2 ], function(err, result) {\n    // result contains the blended result image compressed as PNG.\n});\n\nblend([ image1, image2 ], {\n    format: 'jpeg',\n    quality: 90\n}, function(err, result) {\n    // result contains the blended result image compressed as JPEG.\n});\n```\n\n### Options\n\n- `format`: `jpeg`, `png`, or `webp`\n- `quality`: integer indicating the quality of the final image. Meaning and range differs per format. For JPEG and webp the range is from 0-100. It defaults to 80. The lower the number the lower image quality and smaller the final image size. For PNG range is from 2-256. It means the # of colors to reduce the image to using. The lower the number the lower image quality and smaller the final image size.\n- `width`: integer, default 0: final width of blended image. If options provided with no width value it will default to 0\n- `height`: integer, default 0: final width of blended image. If options provided with no height value it will default to 0\n- `reencode`: boolean, default false\n- `matte`: when alpha is used this is the color to initialize the buffer to (reencode will be set to true automatically when a matte is supplied)\n- `compression`: level of compression to use when format is `png`. The higher value indicates higher compression and implies slower encodeing speeds. The lower value indicates faster encoding but larger final images. Default is 6. If the encoder is `libpng` then the valid range is between 1 and 9. If the encoder is `miniz` then the valid range is between 1 and 10. The reason for this difference is that `miniz` has a special \"UBER\" compression mode that tries to be extremely small at the potential cost of being extremely slow.\n- `palette`: pass a blend.Palette object to be used to reduced PNG images to a fixed array of colors\n- `mode`: `octree` or `hextree` - the PNG quantization method to use, from Mapnik: https://github.com/mapnik/mapnik/wiki/OutputFormats. Octree only support a few alpha levels, but is faster while Hextree supports many alpha levels.\n- `encoder`: `libpng` or `miniz` - the PNG encoder to use. `libpng` is standard while `miniz` is experimental but faster.\n\n# Installation\n\n    npm install blend@latest\n\n# Development\n\nTo run tests for this module, run `npm install --dev` to install the testing framework, then\n`npm test`. Tests require [Imagemagick](http://www.imagemagick.org/script/index.php) for its `compare` utility.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mapbox/node-blend.git"
  },
  "scripts": {
    "test": "eslint index.js && mocha -R spec --timeout 5000"
  },
  "version": "1.2.0"
}
